/*Update views */

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwItems]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwItems]
GO
CREATE view {databaseOwner}[{objectQualifier}Publish_vwItems] as

SELECT
	cast(case i.ApprovedItemVersionID when iv.ItemVersionID then 1 else 0 end as bit) as IsCurrentVersion,
	iv.ItemId, iv.OriginalItemVersionId, iv.ItemVersionDate, iv.StartDate, iv.EndDate, 
	iv.LanguageId, iv.AuthorUserId, iv.ApprovalStatusId, iv.ApprovalDate, iv.ApprovalUserId, iv.ApprovalComments, 
	iv.MetaKeywords, iv.MetaDescription, iv.MetaTitle, iv.DisplayTabId, iv.LastUpdated,
	i.PortalID, i.ItemTypeID, iv.ItemVersionID, it.[Name] as ItemType,
	iv.[Name], iv.[Description], iv.Disabled, i.CreatedDate, i.ApprovedItemVersionID
	, 'Thumbnail' = case when fl.FileName is null then iv.Thumbnail else fl.Folder + fl.FileName end,
	ModuleId, i.ItemIdentifier, iv.ItemVersionIdentifier, iv.Url, iv.NewWindow, iv.RevisingUserId, i.ViewCount, i.CommentCount, ivs.PropertyValue as 'Author'

FROM
	 {databaseOwner}[{objectQualifier}Publish_Item] i
	join {databaseOwner}[{objectQualifier}Publish_ItemType] it on (i.ItemTypeID = it.ItemTypeID)
	join {databaseOwner}[{objectQualifier}Publish_ItemVersion] iv on (i.ItemID = iv.ItemID)
	left outer join {databaseOwner}[{objectQualifier}Publish_ItemVersionSettings] ivs on (iv.ItemVersionId = ivs.ItemVersionId and ivs.controlname ='lblAuthorName' and ivs.PropertyName ='Text')
	left outer join {databaseOwner}[{objectQualifier}vw_Files] fl on iv.Thumbnail = 'fileid=' + convert(varchar, fl.FileID)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwParentItems]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwParentItems]
GO

CREATE view {databaseOwner}[{objectQualifier}Publish_vwParentItems] as
select
	
	r.childItemId, r.childItemVersionId, r.relationshiptypeid, parent.*
from {databaseOwner}[{objectQualifier}Publish_ItemRelationship] r
	join {databaseOwner}[{objectQualifier}Publish_RelationshipType] rt on (r.RelationshipTypeID = rt.RelationshipTypeID)
	join {databaseOwner}[{objectQualifier}Publish_vwItems]parent on (r.parentItemId = parent.ItemId)


GO



if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwCategories]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwCategories]
GO


CREATE view {databaseOwner}[{objectQualifier}Publish_vwCategories] as
select
	 cv.SortOrder, cv.ChildDisplayTabId, i.*
from 
	 {databaseOwner}[{objectQualifier}Publish_vwItems] i 
	join {databaseOwner}[{objectQualifier}Publish_CategoryVersion] cv on (i.ItemVersionID = cv.ItemVersionID)
GO



if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwChildItems]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwChildItems]
GO

CREATE view {databaseOwner}[{objectQualifier}Publish_vwChildItems] as
select
	r.ParentItemID, r.sortorder, child.*, rt.RelationshipName, rt.RelationshipTypeID
from 
	 {databaseOwner}[{objectQualifier}Publish_ItemRelationship] r
	join {databaseOwner}[{objectQualifier}Publish_RelationshipType] rt on (r.RelationshipTypeID = rt.RelationshipTypeID)
	join {databaseOwner}[{objectQualifier}Publish_vwItems] child on (r.ChildItemVersionID = child.ItemVersionID)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwComments]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwComments]
GO


CREATE view {databaseOwner}[{objectQualifier}Publish_vwComments] as
select
	c.commentId, c.commentText, c.approvalStatusId, c.userId, i.itemId
	, c.itemVersionId, c.createdDate, c.lastUpdated, c.firstName, c.lastName, c.emailAddress, c.ratingId, r.rating
	, c.url
from
	[{objectQualifier}Publish_Comment] c
	JOIN [{objectQualifier}Publish_vwItems] i on (c.itemVersionId = i.ItemVersionId)
	LEFT JOIN [{objectQualifier}Publish_Rating] r on (c.ratingId = r.ratingId)

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwParentItems]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwParentItems]
GO

CREATE view {databaseOwner}[{objectQualifier}Publish_vwParentItems] as
select
	
	r.childItemId, r.childItemVersionId, r.relationshiptypeid, parent.*
from {databaseOwner}[{objectQualifier}Publish_ItemRelationship] r
	join {databaseOwner}[{objectQualifier}Publish_RelationshipType] rt on (r.RelationshipTypeID = rt.RelationshipTypeID)
	join {databaseOwner}[{objectQualifier}Publish_vwItems]parent on (r.parentItemId = parent.ItemId)
GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwItemVersions]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwItemVersions]
GO

CREATE view {databaseOwner}[{objectQualifier}Publish_vwItemVersions] as
select
	'categoryedit' as AdminType, 
	null as VersionNumber, i.*
from 
	 {databaseOwner}[{objectQualifier}Publish_vwItems] i 
	join {databaseOwner}[{objectQualifier}Publish_CategoryVersion] cv on (i.ItemVersionID = cv.ItemVersionID)
union all
select
	'articleedit' as AdminType, 
	av.VersionNumber,i.*
from 
 	{databaseOwner}[{objectQualifier}Publish_vwItems] i 
	join {databaseOwner}[{objectQualifier}Publish_ArticleVersion] av on (i.ItemVersionID = av.ItemVersionID)



GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwItemListing]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwItemListing]
GO

create view {databaseOwner}[{objectQualifier}Publish_vwItemListing] as
select
	catDetail.ItemId, catDetail.[Name] CategoryName, 
	child.[Name] ChildName, child.[Description] ChildDescription, child.ItemTypeId ChildItemTypeId,
	child.ItemId ChildItemId, 
	cat.PortalId, child.LastUpdated, child.AuthorUserId
	, child.CreatedDate
	, child.Thumbnail
	, catDetail.StartDate
	, child.Url
	, child.NewWindow
	, child.RevisingUserId
from 
	{objectQualifier}Publish_fnGetAllCategories() cat
	join {databaseOwner}[{objectQualifier}Publish_vwItemVersions] catDetail on (cat.ChildItemId = catDetail.ItemId)
	join {databaseOwner}[{objectQualifier}Publish_vwChildItems] child on (catDetail.ItemId = child.ParentItemId)
	--join [{objectQualifier}users] u on (u.userId = child.[AuthorUserId])
where 	catDetail.IsCurrentVersion = 1
and 	child.IsCurrentVersion = 1
and 	child.RelationshipTypeId in 
	(
		select RelationshipTypeId from {databaseOwner}[{objectQualifier}Publish_RelationshipType] 
		where RelationshipName = 'Item To Parent Category' or RelationshipName = 'Item to Related Category'
	)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwArticles]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwArticles]
GO


CREATE view {databaseOwner}[{objectQualifier}Publish_vwArticles] as
select
	 av.ArticleText, av.VersionNumber
	 , av.VersionDescription
	 , av.ReferenceNumber
	 , i.*
	 , (select avg(convert(FLOAT, Rating)) from [{objectQualifier}Publish_Rating] where itemVersionId in (select itemVersionId from [{objectQualifier}Publish_vwItems] where itemId = i.ItemId)) as AverageRating
from 
	 [{objectQualifier}Publish_vwItems] i 
	join [{objectQualifier}Publish_ArticleVersion] av on (i.ItemVersionID = av.ItemVersionID)

GO



if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_spGetChildrenInCategoryPaging]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Publish_spGetChildrenInCategoryPaging]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Publish_spGetChildrenInCategoryPaging]  
(@childTypeId int,   
@categoryId int,   
@index int,
@pagesize int,
@itemSort bit,
@itemSortDirection bit,
@sortParameters nvarchar(400),
@portalId int  
)
as 


	declare @sql varchar(8000)

	declare @topCatRel int
	set @topCatRel  = (select RelationshipTypeId from {databaseOwner}[{objectQualifier}Publish_RelationshipType] 
		where RelationshipName = 'Category To Top Level Category')

	declare @parentCatRel int
	set @parentCatRel = (select RelationshipTypeId from {databaseOwner}[{objectQualifier}Publish_RelationshipType] 
		where RelationshipName = 'Item To Parent Category')

	declare @relatedCatRel int
	set @relatedCatRel = (select RelationshipTypeId from {databaseOwner}[{objectQualifier}Publish_RelationshipType] 
		where RelationshipName = 'Item To Related Category')



	Create table #tmpResults 
	(
		Id int not null IDENTITY(1,1),
		ChildItemId int, 
		Thumbnail varchar(500), 
		ChildName nvarchar(255), 
		ChildDescription ntext,
		ChildItemTypeId int,
		StartDate datetime,
		LastUpdated datetime,
		CreatedDate datetime,
		AuthorUserId int,
		DisplayName nvarchar(128),
		Author nvarchar(255),
		ItemRelationshipId int,
		SortOrder int,
		TotalRows int
	)


DECLARE @IsCategory int 
IF (@categoryId = (select itemid from {databaseOwner}{objectQualifier}publish_vwItems where name = 'category' and iscurrentversion=1)) 
SET @IsCategory = 1 
ELSE 
SET @IsCategory = 0


if (@itemSort = 1)
begin

	set @sql =  'insert into #tmpResults (ChildItemId, Thumbnail,  ChildName, ChildDescription, ChildItemTypeId, StartDate, LastUpdated, CreatedDate, AuthorUserId, DisplayName, Author, ItemRelationshipId, SortOrder)'
		
	set @sql = @sql + ' select  il.ChildItemId, i.Thumbnail, i.Name as ''ChildName'', i.Description as ''ChildDescription'', i.ItemTypeId, i.StartDate, i.LastUpdated, i.CreatedDate, i.AuthorUserId, u.DisplayName, i.Author, il.ItemRelationshipId, il.SortOrder '
	
	if ( @IsCategory =1 )	
	begin
	
		set @sql = @sql + ' from {databaseOwner}{objectQualifier}Publish_fnGetChildItemsWithTwoTypes(' + Convert(varchar(20),@categoryId) + ', ' + Convert(varchar(20),@parentCatRel) +',' +  Convert(varchar(20),@topCatRel) +') il '
	end 
	else
	begin

		set @sql = @sql + ' from {databaseOwner}{objectQualifier}Publish_fnGetChildItemsWithTwoTypes(' + Convert(varchar(20),@categoryId) + ', ' + Convert(varchar(20),@parentCatRel) +',' +  Convert(varchar(20),@relatedCatRel) +') il '
	end
	
	set @sql = @sql + ' join {databaseOwner}[{objectQualifier}publish_vwItems] i on (il.ChildItemId = i.ItemId) join {databaseOwner}[{objectQualifier}users] u on (u.UserId = i.AuthorUserId) '
	set @sql = @sql + ' where i.PortalId = ' + Convert(varchar(20), @PortalId)
	if (@childTypeId <1)
	begin
		set @sql = @sql + ' and (i.ItemTypeId = (select itemtypeid from {databaseOwner}[{objectQualifier}publish_itemtype] where name =''article'') '
		set @sql = @sql + ' or i.ItemTypeId = (select itemtypeid from {databaseOwner}[{objectQualifier}publish_itemtype] where name =''category'')) '
	end
	else begin
		set @sql = @sql + ' and i.ItemTypeId = ' +  Convert(varchar(20), @childTypeId)
	end
	
	set @sql = @sql + ' and i.StartDate < GetDate() '
	set @sql = @sql + ' and (i.EndDate > GetDate() or i.EndDate is null) '
	set @sql = @sql + ' and i.IsCurrentVersion = 1 '
	set @sql = @sql + ' and il.SortOrder > 0 '
	if (@categoryId > 0)
	begin
		set @sql = @sql + ' and il.ParentItemId = ' +  Convert(varchar(20), @categoryId)
	end

	set @sql = @sql + ' order by  il.SortOrder '

	if (@itemSortDirection = 1)
	 begin

		set @sql = @sql + ' asc ' 
	end
	else begin
		set @sql = @sql + ' desc ' 
	end

	exec (@sql)
END

	set @sql =  'insert into #tmpResults (ChildItemId, Thumbnail,  ChildName, ChildDescription, ChildItemTypeId, StartDate, LastUpdated, CreatedDate, AuthorUserId, DisplayName, Author, ItemRelationshipId, SortOrder)'
	
	set @sql = @sql + ' select  il.ChildItemId, i.Thumbnail, i.Name as ''ChildName'', i.Description as ''ChildDescription'', i.ItemTypeId, i.StartDate, i.LastUpdated, i.CreatedDate, i.AuthorUserId, u.DisplayName, i.Author, il.ItemRelationshipId, il.SortOrder'
	if ( @IsCategory = 1)
	begin
	
		set @sql = @sql + ' from {databaseOwner}{objectQualifier}Publish_fnGetChildItemsWithTwoTypes(' + Convert(varchar(20),@categoryId) + ', ' + Convert(varchar(20),@parentCatRel) +',' +  Convert(varchar(20),@topCatRel) +') il '
	end 
	else
	begin

		set @sql = @sql + ' from {databaseOwner}{objectQualifier}Publish_fnGetChildItemsWithTwoTypes(' + Convert(varchar(20),@categoryId) + ', ' + Convert(varchar(20),@parentCatRel) +',' +  Convert(varchar(20),@relatedCatRel) +') il '
	end

	set @sql = @sql + ' join {databaseOwner}[{objectQualifier}publish_vwItems] i on (il.ChildItemId = i.ItemId) join {databaseOwner}[{objectQualifier}users] u on (u.UserId = i.AuthorUserId) '
	set @sql = @sql + ' where i.PortalId = ' + Convert(varchar(20), @PortalId)
	if (@childTypeId <1)
	begin
		set @sql = @sql + ' and (i.ItemTypeId = (select itemtypeid from {databaseOwner}[{objectQualifier}publish_itemtype] where name =''article'') '
		set @sql = @sql + ' or i.ItemTypeId = (select itemtypeid from {databaseOwner}[{objectQualifier}publish_itemtype] where name =''category'')) '
	end
	else begin
		set @sql = @sql + ' and i.ItemTypeId = ' +  Convert(varchar(20), @childTypeId)
	end
	
	set @sql = @sql + ' and i.StartDate < GetDate() '
	set @sql = @sql + ' and (i.EndDate > GetDate() or i.EndDate is null) '
	set @sql = @sql + ' and i.IsCurrentVersion = 1 '

if (@itemSort = 1)
begin
	set @sql = @sql + ' and il.SortOrder = 0 '
end
	if (@categoryId > 0)
	begin
		set @sql = @sql + ' and il.ParentItemId = ' +  Convert(varchar(20), @categoryId)
	end

	set @sql = @sql + ' order by  ' + @sortParameters

	exec (@sql)

	DECLARE @rows int

	select @rows = count(*) from #tmpResults

	update #tmpResults set TotalRows = @rows

	if (@PageSize <1)
	 	BEGIN
	 		select * from #tmpResults
	 	END
	ELSE
	 	BEGIN
	 		select * from #tmpResults
	 		where (id >= @index * @PageSize + 1) and id < (@index * @PageSize) + @PageSize + 1
	 	END
GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}publish_spGetItemsForTagsPaging]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}publish_spGetItemsForTagsPaging]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}publish_spGetItemsForTagsPaging] 
	@PortalId int
	, @TagList nvarchar(4000) = null
	, @index int
	, @pagesize int
	, @sortParameters nvarchar(400)


AS

SET Transaction Isolation Level Read UNCOMMITTED

	declare @xmlDoc int
	EXEC sp_xml_preparedocument @xmlDoc OUTPUT, @TagList

	CREATE TABLE #Tags
	(
		[TagId] nvarchar(255)
	)

	insert into #Tags ([TagId])
	select CONVERT(nvarchar(255), [text])
	from OPENXML(@xmlDoc, '/Tags/Tag/', 2)
	where [text] is not null

	
	declare @TagCount int

	select @TagCount = count(*) from #Tags


	declare @sql varchar(8000)
	Create table #tmpResults 
	(
		Id int not null IDENTITY(1,1),
		ChildItemId int, 
		Thumbnail varchar(500), 
		ChildName nvarchar(255), 
		ChildDescription ntext,
		ChildItemTypeId int,
		StartDate datetime,
		LastUpdated datetime,
		CreatedDate datetime,
		AuthorUserId int,
		DisplayName nvarchar(128),
		Author nvarchar(255),
		ItemRelationshipId int,
		SortOrder int,
		TotalRows int
	)

	set @sql =  'insert into #tmpResults (
		ChildItemId
		, Thumbnail
		,  ChildName
		, ChildDescription
		, ChildItemTypeId
		, StartDate
		, LastUpdated
		, CreatedDate
		, AuthorUserId
		, DisplayName
		, Author)'

	set @sql = @sql + ' select 
	itemId as ''ChildItemId''
	, Thumbnail
	, [name] as ''ChildName''
	,  description as ''ChildDescription''
	, vi.ItemTypeId as ''ChildItemTypeId''
	, StartDate
	, LastUpdated
	, CreatedDate
	, AuthorUserId
	, u.DisplayName
	, Author
	
	from {objectQualifier}publish_vwitems vi
	join {objectQualifier}users u on (u.UserId = vi.AuthorUserId)
	where vi.itemversionid in (
		select distinct  ivt.itemversionid
		from {objectQualifier}publish_tags t
		inner join {objectQualifier}publish_itemversiontags ivt on t.TagId = ivt.TagId
		where ivt.ItemVersionId in (
				select vi2.ItemVersionId
				from #Tags X
				inner join {objectQualifier}publish_tags t2 on Convert(int, X.[TagId]) = t2.TagId
				inner join {objectQualifier}publish_itemversiontags ivt2 on ivt2.TagId = t2.TagId
				inner join {objectQualifier}publish_vwItems vi2 on vi2.ItemVersionId = ivt2.ItemVersionId
				where vi2.IsCurrentVersion = 1
				group by vi2.ItemVersionId
				having count(*) = ' + Convert(varchar(20), @TagCount) + '
				)
		and vi.PortalId = ' + Convert(varchar(20), @PortalId) + ' Group By t.TagId, ivt.itemversionid having t.[TagId] in (select [TagId] from #Tags))'

	set @sql = @sql + ' order by  ' + @sortParameters


	exec (@sql)

	DECLARE @rows int

	select @rows = count(*) from #tmpResults

	update #tmpResults set TotalRows = @rows



	if (@PageSize <1)
	 	BEGIN
	 		select * from #tmpResults
	 	END
	ELSE
	 	BEGIN
	 		select * from #tmpResults
	 		where (id >= @index * @PageSize + 1) and id < (@index * @PageSize) + @PageSize + 1
	 	END


	DROP TABLE #Tags


	EXEC sp_xml_removedocument @xmlDoc

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Publish_spGetAdminItemListingSearchKey]') and OBJECTPROPERTY(id,N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}Publish_spGetAdminItemListingSearchKey]
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Publish_spGetAdminItemListingSearchKey]    
@ParentItemId int,     
@ItemTypeId int,    
@RelationshipTypeId int,
@otherRelationshipTypeId int,
@ApprovalStatusId int,    
@PortalId int,
@OrderBy nvarchar (100),
@SearchKey nvarchar(250)

with RECOMPILE

AS    
BEGIN
set nocount on    
    
create table #TempTable
(     
 ItemId int not null    
 , ItemVersionId int not null    
)

insert into #TempTable
select
 c.ItemId
 , Max(c.ItemVersionId)

from
 [{objectQualifier}Publish_vwChildItems] c
where
 c.ApprovalStatusId = @ApprovalStatusId
 and c.Name like '%' + @SearchKey + '%'
 and (c.RelationshipTypeId = @RelationshipTypeId or c.relationshiptypeId = @otherRelationshipTypeId)
 and c.PortalID = @PortalId    
 and (c.ParentItemID = @ParentItemId OR @ParentItemId = -1)
 and c.ItemTypeId = @ItemTypeId    
 and not exists (Select * from #TempTable w where w.ItemId = c.itemId)    
group by c.ItemId    
    
set nocount off    
DECLARE @SQLStatement nvarchar(4000)
SELECT @SQLStatement = 'SELECT vi.[Name]     
				 , vi.[Description]    
				 , t.ItemId    
				 , t.ItemVersionId    
				 , vi.IsCurrentVersion
				 , vi.CreatedDate
				 , vi.LastUpdated
				 , vi.ModuleId
				 , vi.ItemVersionIdentifier

				 , u.DisplayName
				 , vi.Author
				 , (select count(ParentItemId) from     
				 [{objectQualifier}Publish_vwChilditems] vci where ParentItemId = t.ItemId and RelationShipTypeId =     
				 (select RelationshipTypeId from [{objectQualifier}Publish_relationshiptype] where relationshipname = ''Item To Parent Category'')    
				 and ItemTypeId =     
				 (select  itemtypeid from [{objectQualifier}Publish_Itemtype] where name = ''Category'')
				 and vci.IsCurrentVersion = 1
				 ) ''ChildCount''
				 
				    
				from #TempTable t 
				join [{objectQualifier}Publish_vwItems] vi on (vi.ItemVersionId = t.ItemVersionId)    
				join [{objectQualifier}Users]  u on (vi.AuthorUserId = u.UserId)
				where vi.ApprovalStatusId = ' + Convert(varchar(5),@ApprovalStatusId)  + ' order by ' + @OrderBy
				-- vi.[Name] 
				
exec(@SQLStatement)
drop table #TempTable
END
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Publish_spGetAdminItemListing]') and OBJECTPROPERTY(id,N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}Publish_spGetAdminItemListing]
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Publish_spGetAdminItemListing]    
@ParentItemId int,     
@ItemTypeId int,    
@RelationshipTypeId int,
@otherRelationshipTypeId int,
@ApprovalStatusId int,    
@PortalId int,
@OrderBy nvarchar (100)

with RECOMPILE

AS    
BEGIN
set nocount on    
    
create table #TempTable
(     
 ItemId int not null    
 , ItemVersionId int not null    
)

insert into #TempTable
select
 c.ItemId
 , Max(c.ItemVersionId)

from
 [{objectQualifier}Publish_vwChildItems] c
where
 c.ApprovalStatusId = @ApprovalStatusId
 and (c.RelationshipTypeId = @RelationshipTypeId or c.relationshiptypeId = @otherRelationshipTypeId)
 and c.PortalID = @PortalId    
 and (c.ParentItemID = @ParentItemId OR @ParentItemId = -1)
 and c.ItemTypeId = @ItemTypeId    
 and not exists (Select * from #TempTable w where w.ItemId = c.itemId)    
group by c.ItemId    
    
set nocount off    
DECLARE @SQLStatement nvarchar(4000)
SELECT @SQLStatement = 'SELECT vi.[Name]     
				 , vi.[Description]    
				 , t.ItemId    
				 , t.ItemVersionId    
				 , vi.IsCurrentVersion
				 , vi.CreatedDate
				 , vi.LastUpdated
				 , vi.ModuleId
				 , vi.ItemVersionIdentifier
				 , u.DisplayName
				 , vi.Author
				 , (select count(ParentItemId) from     
				 [{objectQualifier}Publish_vwChilditems] vci where ParentItemId = t.ItemId and RelationShipTypeId =     
				 (select RelationshipTypeId from [{objectQualifier}Publish_relationshiptype] where relationshipname = ''Item To Parent Category'')    
				 and ItemTypeId =     
				 (select  itemtypeid from [{objectQualifier}Publish_Itemtype] where name = ''Category'')
				 and vci.IsCurrentVersion = 1
				 ) ''ChildCount''
				 
				    
				from #TempTable t 
				join [{objectQualifier}Publish_vwItems] vi on (vi.ItemVersionId = t.ItemVersionId)    
				join [{objectQualifier}Users]  u on (vi.AuthorUserId = u.UserId)
				where vi.ApprovalStatusId = ' + Convert(varchar(5),@ApprovalStatusId)  + ' order by ' + @OrderBy
				-- vi.[Name] 
				
exec(@SQLStatement)
drop table #TempTable
END
GO




