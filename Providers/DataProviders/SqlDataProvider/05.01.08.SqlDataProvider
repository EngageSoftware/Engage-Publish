/* add new column to Publish_Item called RevisingUserId this will become the "editor" of a version, leaving AuthorUserId to be a selectable list of authors */

if not exists(select * from sysobjects so join syscolumns sc on (so.id = sc.id) where so.[Name] = '{objectQualifier}Publish_ItemVersion' and sc.[Name] = 'RevisingUserId')
ALTER TABLE {databaseOwner}{objectQualifier}Publish_ItemVersion ADD
	RevisingUserId int NULL
GO

/* Set the default authorId to be the authorId of the current itemversionid */


UPDATE {databaseOwner}[{objectQualifier}Publish_ItemVersion] 
	set RevisingUserId = (select authoruserid 
				from {databaseOwner}[{objectQualifier}Publish_ItemVersion] iv1
				where iv1.ItemVersionId = iv.ItemVersionId)
	from 
		{databaseOwner}[{objectQualifier}Publish_ItemVersion] iv


GO

/*Update Stored Procedures */

drop procedure {databaseOwner}[{objectQualifier}Publish_spInsertItemVersion]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Publish_spInsertItemVersion]
(
	@ItemId [int]
	, @OriginalItemVersionID [int]
	, @Name [nvarchar] (255)
	, @Description ntext
	, @ItemVersionDate [datetime]
	, @StartDate [datetime]
	, @EndDate [datetime]
	, @LanguageId [int]
	, @AuthorUserId [int]
	, @MetaKeywords [nvarchar] (255)
	, @MetaDescription [nvarchar] (400)
	, @MetaTitle [nvarchar](255)
	, @DisplayTabId [int]
	, @Disabled [bit] = 0
	, @Thumbnail [varchar] (300)
	, @ItemVersionIdentifier Uniqueidentifier
	, @Url [nvarchar] (255)
	, @NewWindow [bit] = 0
	, @RevisingUserId [int]
)
AS 

declare @keywords nvarchar(255)
if (len(ltrim(rtrim(@MetaKeywords))) > 0) set @keywords = @MetaKeywords

declare @metaDesc nvarchar(400)
if (len(ltrim(rtrim(@MetaDescription))) > 0) set @metaDesc = @MetaDescription

declare @title nvarchar(255)
if (len(ltrim(rtrim(@MetaTitle))) > 0) set @title = @MetaTitle

declare @oivId int
if (@OriginalItemVersionID <> -1) set @oivId = @OriginalItemVersionID

declare @dtId int
if (@DisplayTabId <> -1) set @dtId = @DisplayTabId

declare @lId int
if (@LanguageId = -1) 
	set @lId = 1
else
	set @lId = @LanguageId

INSERT INTO {databaseOwner}[{objectQualifier}Publish_ItemVersion] 
(
	[ItemID]
	, [OriginalItemVersionID]
	, [Name]
	, [Description]
	, [ItemVersionDate]
	, [StartDate]
	, [Enddate]
	, [LanguageId]
	, [AuthorUserId]
	, [RevisingUserId]
	, [MetaKeywords]
	, [MetaDescription]
	, [MetaTitle]
	, [DisplayTabId]
	, [LastUpdated]
	, [Disabled]
	, [Thumbnail]
	, [ItemVersionIdentifier]
	, [Url]
	, [NewWindow]
	)
 
VALUES 
	( 
	@ItemId 
	, @oivId
	, @Name 
	, @Description
	, @ItemVersionDate
	, @StartDate
	, @EndDate
	, @lId
	, @AuthorUserId
	, @RevisingUserId
	, @keywords
	, @metaDesc
	, @title
	, @dtId
	, GetDate()
	, @disabled
	, @Thumbnail
	, @ItemVersionIdentifier
	, @Url
	, @NewWindow
	)
 
select SCOPE_IDENTITY()
return SCOPE_IDENTITY()

GO



/*Update views */

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwItems]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwItems]
GO

CREATE view {databaseOwner}[{objectQualifier}Publish_vwItems] as
SELECT
	cast(case i.ApprovedItemVersionID when iv.ItemVersionID then 1 else 0 end as bit) as IsCurrentVersion,
	iv.ItemId, iv.OriginalItemVersionId, iv.ItemVersionDate, iv.StartDate, iv.EndDate, 
	iv.LanguageId, iv.AuthorUserId, iv.ApprovalStatusId, iv.ApprovalDate, iv.ApprovalUserId, iv.ApprovalComments, 
	iv.MetaKeywords, iv.MetaDescription, iv.MetaTitle, iv.DisplayTabId, iv.LastUpdated,
	i.PortalID, i.ItemTypeID, iv.ItemVersionID, it.[Name] as ItemType,
	iv.[Name], iv.[Description], iv.Disabled, i.CreatedDate, i.ApprovedItemVersionID
	, 'Thumbnail' = case when fl.FileName is null then iv.Thumbnail else fl.Folder + fl.FileName end,
	ModuleId, i.ItemIdentifier, iv.ItemVersionIdentifier, iv.Url, iv.NewWindow, iv.RevisingUserId

FROM
	 {databaseOwner}[{objectQualifier}Publish_Item] i
	join {databaseOwner}[{objectQualifier}Publish_ItemType] it on (i.ItemTypeID = it.ItemTypeID)
	join {databaseOwner}[{objectQualifier}Publish_ItemVersion] iv on (i.ItemID = iv.ItemID)
	left outer join {databaseOwner}[{objectQualifier}vw_Files] fl on iv.Thumbnail = 'fileid=' + convert(varchar, fl.FileID)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwParentItems]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwParentItems]
GO

CREATE view {databaseOwner}[{objectQualifier}Publish_vwParentItems] as
select
	
	r.childItemId, r.childItemVersionId, r.relationshiptypeid, parent.*
from {databaseOwner}[{objectQualifier}Publish_ItemRelationship] r
	join {databaseOwner}[{objectQualifier}Publish_RelationshipType] rt on (r.RelationshipTypeID = rt.RelationshipTypeID)
	join {databaseOwner}[{objectQualifier}Publish_vwItems]parent on (r.parentItemId = parent.ItemId)


GO



if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwCategories]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwCategories]
GO


CREATE view {databaseOwner}[{objectQualifier}Publish_vwCategories] as
select
	 cv.SortOrder, cv.ChildDisplayTabId, i.*
from 
	 {databaseOwner}[{objectQualifier}Publish_vwItems] i 
	join {databaseOwner}[{objectQualifier}Publish_CategoryVersion] cv on (i.ItemVersionID = cv.ItemVersionID)
GO



if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwChildItems]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwChildItems]
GO

CREATE view {databaseOwner}[{objectQualifier}Publish_vwChildItems] as
select
	r.ParentItemID, r.sortorder, child.*, rt.RelationshipName, rt.RelationshipTypeID
from 
	 {databaseOwner}[{objectQualifier}Publish_ItemRelationship] r
	join {databaseOwner}[{objectQualifier}Publish_RelationshipType] rt on (r.RelationshipTypeID = rt.RelationshipTypeID)
	join {databaseOwner}[{objectQualifier}Publish_vwItems] child on (r.ChildItemVersionID = child.ItemVersionID)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwComments]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwComments]
GO


CREATE view {databaseOwner}[{objectQualifier}Publish_vwComments] as
select
	c.commentId, c.commentText, c.approvalStatusId, c.userId, i.itemId
	, c.itemVersionId, c.createdDate, c.lastUpdated, c.firstName, c.lastName, c.emailAddress, c.ratingId, r.rating
	, c.url
from
	[{objectQualifier}Publish_Comment] c
	JOIN [{objectQualifier}Publish_vwItems] i on (c.itemVersionId = i.ItemVersionId)
	LEFT JOIN [{objectQualifier}Publish_Rating] r on (c.ratingId = r.ratingId)

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwParentItems]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwParentItems]
GO

CREATE view {databaseOwner}[{objectQualifier}Publish_vwParentItems] as
select
	
	r.childItemId, r.childItemVersionId, r.relationshiptypeid, parent.*
from {databaseOwner}[{objectQualifier}Publish_ItemRelationship] r
	join {databaseOwner}[{objectQualifier}Publish_RelationshipType] rt on (r.RelationshipTypeID = rt.RelationshipTypeID)
	join {databaseOwner}[{objectQualifier}Publish_vwItems]parent on (r.parentItemId = parent.ItemId)
GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwItemVersions]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwItemVersions]
GO

CREATE view {databaseOwner}[{objectQualifier}Publish_vwItemVersions] as
select
	'categoryedit' as AdminType, 
	null as VersionNumber, i.*
from 
	 {databaseOwner}[{objectQualifier}Publish_vwItems] i 
	join {databaseOwner}[{objectQualifier}Publish_CategoryVersion] cv on (i.ItemVersionID = cv.ItemVersionID)
union all
select
	'articleedit' as AdminType, 
	av.VersionNumber,i.*
from 
 	{databaseOwner}[{objectQualifier}Publish_vwItems] i 
	join {databaseOwner}[{objectQualifier}Publish_ArticleVersion] av on (i.ItemVersionID = av.ItemVersionID)



GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwItemListing]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwItemListing]
GO

create view {databaseOwner}[{objectQualifier}Publish_vwItemListing] as
select
	catDetail.ItemId, catDetail.[Name] CategoryName, 
	child.[Name] ChildName, child.[Description] ChildDescription, child.ItemTypeId ChildItemTypeId,
	child.ItemId ChildItemId, 
	cat.PortalId, child.LastUpdated, child.AuthorUserId
	, child.CreatedDate
	, child.Thumbnail
	, catDetail.StartDate
	, child.Url
	, child.NewWindow
	, child.RevisingUserId
from 
	{objectQualifier}Publish_fnGetAllCategories() cat
	join {databaseOwner}[{objectQualifier}Publish_vwItemVersions] catDetail on (cat.ChildItemId = catDetail.ItemId)
	join {databaseOwner}[{objectQualifier}Publish_vwChildItems] child on (catDetail.ItemId = child.ParentItemId)
	--join [{objectQualifier}users] u on (u.userId = child.[AuthorUserId])
where 	catDetail.IsCurrentVersion = 1
and 	child.IsCurrentVersion = 1
and 	child.RelationshipTypeId in 
	(
		select RelationshipTypeId from {databaseOwner}[{objectQualifier}Publish_RelationshipType] 
		where RelationshipName = 'Item To Parent Category' or RelationshipName = 'Item to Related Category'
	)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwArticles]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwArticles]
GO


CREATE view {databaseOwner}[{objectQualifier}Publish_vwArticles] as
select
	 av.ArticleText, av.VersionNumber
	 , av.VersionDescription
	 , av.ReferenceNumber
	 , i.*
	 , (select avg(convert(FLOAT, Rating)) from [{objectQualifier}Publish_Rating] where itemVersionId in (select itemVersionId from [{objectQualifier}Publish_vwItems] where itemId = i.ItemId)) as AverageRating
from 
	 [{objectQualifier}Publish_vwItems] i 
	join [{objectQualifier}Publish_ArticleVersion] av on (i.ItemVersionID = av.ItemVersionID)

GO

/* Publish_spGetAllChildrenByTypeWithTwoRelationshipTypes */
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_spGetChildrenInCategoryPaging]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}Publish_spGetChildrenInCategoryPaging]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Publish_spGetChildrenInCategoryPaging]  
(@childTypeId int,   
@categoryId int,   
@index int,
@pagesize int,
@itemSort bit,
@itemSortDirection bit,
@sortParameters nvarchar(400),
@portalId int  
)
as 


	declare @sql varchar(8000)

	declare @topCatRel int
	set @topCatRel  = (select RelationshipTypeId from {databaseOwner}[{objectQualifier}Publish_RelationshipType] 
		where RelationshipName = 'Category To Top Level Category')

	declare @parentCatRel int
	set @parentCatRel = (select RelationshipTypeId from {databaseOwner}[{objectQualifier}Publish_RelationshipType] 
		where RelationshipName = 'Item To Parent Category')

	declare @relatedCatRel int
	set @relatedCatRel = (select RelationshipTypeId from {databaseOwner}[{objectQualifier}Publish_RelationshipType] 
		where RelationshipName = 'Item To Related Category')



	Create table #tmpResults 
	(
		Id int not null IDENTITY(1,1),
		ChildItemId int, 
		Thumbnail varchar(500), 
		ChildName nvarchar(255), 
		ChildDescription ntext,
		ChildItemTypeId int,
		StartDate datetime,
		LastUpdated datetime,
		CreatedDate datetime,
		AuthorUserId int,
		DisplayName nvarchar(128),
		ItemRelationshipId int,
		SortOrder int,
		TotalRows int
	)


DECLARE @IsCategory int 
IF (@categoryId = (select itemid from {databaseOwner}{objectQualifier}publish_vwItems where name = 'category' and iscurrentversion=1)) 
SET @IsCategory = 1 
ELSE 
SET @IsCategory = 0


if (@itemSort = 1)
begin

	set @sql =  'insert into #tmpResults (ChildItemId, Thumbnail,  ChildName, ChildDescription, ChildItemTypeId, StartDate, LastUpdated, CreatedDate, AuthorUserId, DisplayName, ItemRelationshipId, SortOrder)'
		
	set @sql = @sql + ' select  il.ChildItemId, i.Thumbnail, i.Name as ''ChildName'', i.Description as ''ChildDescription'', i.ItemTypeId, i.StartDate, i.LastUpdated, i.CreatedDate, i.AuthorUserId, u.DisplayName, il.ItemRelationshipId, il.SortOrder '
	
	if ( @IsCategory =1 )	
	begin
	
		set @sql = @sql + ' from {databaseOwner}{objectQualifier}Publish_fnGetChildItemsWithTwoTypes(' + Convert(varchar(20),@categoryId) + ', ' + Convert(varchar(20),@parentCatRel) +',' +  Convert(varchar(20),@topCatRel) +') il '
	end 
	else
	begin

		set @sql = @sql + ' from {databaseOwner}{objectQualifier}Publish_fnGetChildItemsWithTwoTypes(' + Convert(varchar(20),@categoryId) + ', ' + Convert(varchar(20),@parentCatRel) +',' +  Convert(varchar(20),@relatedCatRel) +') il '
	end
	
	set @sql = @sql + ' join {databaseOwner}[{objectQualifier}publish_vwItems] i on (il.ChildItemId = i.ItemId) join {databaseOwner}[{objectQualifier}users] u on (u.UserId = i.AuthorUserId) '
	set @sql = @sql + ' where i.PortalId = ' + Convert(varchar(20), @PortalId)
	if (@childTypeId <1)
	begin
		set @sql = @sql + ' and (i.ItemTypeId = (select itemtypeid from {databaseOwner}[{objectQualifier}publish_itemtype] where name =''article'') '
		set @sql = @sql + ' or i.ItemTypeId = (select itemtypeid from {databaseOwner}[{objectQualifier}publish_itemtype] where name =''category'')) '
	end
	else begin
		set @sql = @sql + ' and i.ItemTypeId = ' +  Convert(varchar(20), @childTypeId)
	end
	
	set @sql = @sql + ' and i.StartDate < GetDate() '
	set @sql = @sql + ' and (i.EndDate > GetDate() or i.EndDate is null) '
	set @sql = @sql + ' and i.IsCurrentVersion = 1 '
	set @sql = @sql + ' and il.SortOrder > 0 '
	if (@categoryId > 0)
	begin
		set @sql = @sql + ' and il.ParentItemId = ' +  Convert(varchar(20), @categoryId)
	end

	set @sql = @sql + ' order by  il.SortOrder '

	if (@itemSortDirection = 1)
	 begin

		set @sql = @sql + ' asc ' 
	end
	else begin
		set @sql = @sql + ' desc ' 
	end

	exec (@sql)
END

	set @sql =  'insert into #tmpResults (ChildItemId, Thumbnail,  ChildName, ChildDescription, ChildItemTypeId, StartDate, LastUpdated, CreatedDate, AuthorUserId, DisplayName, ItemRelationshipId, SortOrder)'
	
	set @sql = @sql + ' select  il.ChildItemId, i.Thumbnail, i.Name as ''ChildName'', i.Description as ''ChildDescription'', i.ItemTypeId, i.StartDate, i.LastUpdated, i.CreatedDate, i.AuthorUserId, u.DisplayName, il.ItemRelationshipId, il.SortOrder'
	if ( @IsCategory = 1)
	begin
	
		set @sql = @sql + ' from {databaseOwner}{objectQualifier}Publish_fnGetChildItemsWithTwoTypes(' + Convert(varchar(20),@categoryId) + ', ' + Convert(varchar(20),@parentCatRel) +',' +  Convert(varchar(20),@topCatRel) +') il '
	end 
	else
	begin

		set @sql = @sql + ' from {databaseOwner}{objectQualifier}Publish_fnGetChildItemsWithTwoTypes(' + Convert(varchar(20),@categoryId) + ', ' + Convert(varchar(20),@parentCatRel) +',' +  Convert(varchar(20),@relatedCatRel) +') il '
	end

	set @sql = @sql + ' join {databaseOwner}[{objectQualifier}publish_vwItems] i on (il.ChildItemId = i.ItemId) join {databaseOwner}[{objectQualifier}users] u on (u.UserId = i.AuthorUserId) '
	set @sql = @sql + ' where i.PortalId = ' + Convert(varchar(20), @PortalId)
	if (@childTypeId <1)
	begin
		set @sql = @sql + ' and (i.ItemTypeId = (select itemtypeid from {databaseOwner}[{objectQualifier}publish_itemtype] where name =''article'') '
		set @sql = @sql + ' or i.ItemTypeId = (select itemtypeid from {databaseOwner}[{objectQualifier}publish_itemtype] where name =''category'')) '
	end
	else begin
		set @sql = @sql + ' and i.ItemTypeId = ' +  Convert(varchar(20), @childTypeId)
	end
	
	set @sql = @sql + ' and i.StartDate < GetDate() '
	set @sql = @sql + ' and (i.EndDate > GetDate() or i.EndDate is null) '
	set @sql = @sql + ' and i.IsCurrentVersion = 1 '

if (@itemSort = 1)
begin
	set @sql = @sql + ' and il.SortOrder = 0 '
end
	if (@categoryId > 0)
	begin
		set @sql = @sql + ' and il.ParentItemId = ' +  Convert(varchar(20), @categoryId)
	end

	set @sql = @sql + ' order by  ' + @sortParameters

	exec (@sql)

	DECLARE @rows int

	select @rows = count(*) from #tmpResults

	update #tmpResults set TotalRows = @rows

	if (@PageSize <1)
	 	BEGIN
	 		select * from #tmpResults
	 	END
	ELSE
	 	BEGIN
	 		select * from #tmpResults
	 		where (id >= @index * @PageSize + 1) and id < (@index * @PageSize) + @PageSize + 1
	 	END
GO


