
if  not exists(select * from sysobjects so join syscolumns sc on (so.id = sc.id) where so.[Name] = '{objectQualifier}publish_item' and sc.[Name] = 'ViewCount')
begin
	alter table {databaseOwner}[{objectQualifier}publish_item] add ViewCount int default 0
end
GO

if  not exists(select * from sysobjects so join syscolumns sc on (so.id = sc.id) where so.[Name] = '{objectQualifier}publish_item' and sc.[Name] = 'CommentCount')
begin
	alter table {databaseOwner}[{objectQualifier}publish_item] add CommentCount int default 0
end
GO

/*Update views */

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwItems]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwItems]
GO

CREATE view {databaseOwner}[{objectQualifier}Publish_vwItems] as
SELECT
	cast(case i.ApprovedItemVersionID when iv.ItemVersionID then 1 else 0 end as bit) as IsCurrentVersion,
	iv.ItemId, iv.OriginalItemVersionId, iv.ItemVersionDate, iv.StartDate, iv.EndDate, 
	iv.LanguageId, iv.AuthorUserId, iv.ApprovalStatusId, iv.ApprovalDate, iv.ApprovalUserId, iv.ApprovalComments, 
	iv.MetaKeywords, iv.MetaDescription, iv.MetaTitle, iv.DisplayTabId, iv.LastUpdated,
	i.PortalID, i.ItemTypeID, iv.ItemVersionID, it.[Name] as ItemType,
	iv.[Name], iv.[Description], iv.Disabled, i.CreatedDate, i.ApprovedItemVersionID
	, 'Thumbnail' = case when fl.FileName is null then iv.Thumbnail else fl.Folder + fl.FileName end,
	ModuleId, i.ItemIdentifier, iv.ItemVersionIdentifier, iv.Url, iv.NewWindow, iv.RevisingUserId, i.ViewCount, i.CommentCount

FROM
	 {databaseOwner}[{objectQualifier}Publish_Item] i
	join {databaseOwner}[{objectQualifier}Publish_ItemType] it on (i.ItemTypeID = it.ItemTypeID)
	join {databaseOwner}[{objectQualifier}Publish_ItemVersion] iv on (i.ItemID = iv.ItemID)
	left outer join {databaseOwner}[{objectQualifier}vw_Files] fl on iv.Thumbnail = 'fileid=' + convert(varchar, fl.FileID)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwParentItems]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwParentItems]
GO

CREATE view {databaseOwner}[{objectQualifier}Publish_vwParentItems] as
select
	
	r.childItemId, r.childItemVersionId, r.relationshiptypeid, parent.*
from {databaseOwner}[{objectQualifier}Publish_ItemRelationship] r
	join {databaseOwner}[{objectQualifier}Publish_RelationshipType] rt on (r.RelationshipTypeID = rt.RelationshipTypeID)
	join {databaseOwner}[{objectQualifier}Publish_vwItems]parent on (r.parentItemId = parent.ItemId)


GO



if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwCategories]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwCategories]
GO


CREATE view {databaseOwner}[{objectQualifier}Publish_vwCategories] as
select
	 cv.SortOrder, cv.ChildDisplayTabId, i.*
from 
	 {databaseOwner}[{objectQualifier}Publish_vwItems] i 
	join {databaseOwner}[{objectQualifier}Publish_CategoryVersion] cv on (i.ItemVersionID = cv.ItemVersionID)
GO



if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwChildItems]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwChildItems]
GO

CREATE view {databaseOwner}[{objectQualifier}Publish_vwChildItems] as
select
	r.ParentItemID, r.sortorder, child.*, rt.RelationshipName, rt.RelationshipTypeID
from 
	 {databaseOwner}[{objectQualifier}Publish_ItemRelationship] r
	join {databaseOwner}[{objectQualifier}Publish_RelationshipType] rt on (r.RelationshipTypeID = rt.RelationshipTypeID)
	join {databaseOwner}[{objectQualifier}Publish_vwItems] child on (r.ChildItemVersionID = child.ItemVersionID)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwComments]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwComments]
GO


CREATE view {databaseOwner}[{objectQualifier}Publish_vwComments] as
select
	c.commentId, c.commentText, c.approvalStatusId, c.userId, i.itemId
	, c.itemVersionId, c.createdDate, c.lastUpdated, c.firstName, c.lastName, c.emailAddress, c.ratingId, r.rating
	, c.url
from
	[{objectQualifier}Publish_Comment] c
	JOIN [{objectQualifier}Publish_vwItems] i on (c.itemVersionId = i.ItemVersionId)
	LEFT JOIN [{objectQualifier}Publish_Rating] r on (c.ratingId = r.ratingId)

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwParentItems]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwParentItems]
GO

CREATE view {databaseOwner}[{objectQualifier}Publish_vwParentItems] as
select
	
	r.childItemId, r.childItemVersionId, r.relationshiptypeid, parent.*
from {databaseOwner}[{objectQualifier}Publish_ItemRelationship] r
	join {databaseOwner}[{objectQualifier}Publish_RelationshipType] rt on (r.RelationshipTypeID = rt.RelationshipTypeID)
	join {databaseOwner}[{objectQualifier}Publish_vwItems]parent on (r.parentItemId = parent.ItemId)
GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwItemVersions]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwItemVersions]
GO

CREATE view {databaseOwner}[{objectQualifier}Publish_vwItemVersions] as
select
	'categoryedit' as AdminType, 
	null as VersionNumber, i.*
from 
	 {databaseOwner}[{objectQualifier}Publish_vwItems] i 
	join {databaseOwner}[{objectQualifier}Publish_CategoryVersion] cv on (i.ItemVersionID = cv.ItemVersionID)
union all
select
	'articleedit' as AdminType, 
	av.VersionNumber,i.*
from 
 	{databaseOwner}[{objectQualifier}Publish_vwItems] i 
	join {databaseOwner}[{objectQualifier}Publish_ArticleVersion] av on (i.ItemVersionID = av.ItemVersionID)



GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwItemListing]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwItemListing]
GO

create view {databaseOwner}[{objectQualifier}Publish_vwItemListing] as
select
	catDetail.ItemId, catDetail.[Name] CategoryName, 
	child.[Name] ChildName, child.[Description] ChildDescription, child.ItemTypeId ChildItemTypeId,
	child.ItemId ChildItemId, 
	cat.PortalId, child.LastUpdated, child.AuthorUserId
	, child.CreatedDate
	, child.Thumbnail
	, catDetail.StartDate
	, child.Url
	, child.NewWindow
	, child.RevisingUserId
from 
	{objectQualifier}Publish_fnGetAllCategories() cat
	join {databaseOwner}[{objectQualifier}Publish_vwItemVersions] catDetail on (cat.ChildItemId = catDetail.ItemId)
	join {databaseOwner}[{objectQualifier}Publish_vwChildItems] child on (catDetail.ItemId = child.ParentItemId)
	--join [{objectQualifier}users] u on (u.userId = child.[AuthorUserId])
where 	catDetail.IsCurrentVersion = 1
and 	child.IsCurrentVersion = 1
and 	child.RelationshipTypeId in 
	(
		select RelationshipTypeId from {databaseOwner}[{objectQualifier}Publish_RelationshipType] 
		where RelationshipName = 'Item To Parent Category' or RelationshipName = 'Item to Related Category'
	)
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_vwArticles]') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view {databaseOwner}[{objectQualifier}Publish_vwArticles]
GO


CREATE view {databaseOwner}[{objectQualifier}Publish_vwArticles] as
select
	 av.ArticleText, av.VersionNumber
	 , av.VersionDescription
	 , av.ReferenceNumber
	 , i.*
	 , (select avg(convert(FLOAT, Rating)) from [{objectQualifier}Publish_Rating] where itemVersionId in (select itemVersionId from [{objectQualifier}Publish_vwItems] where itemId = i.ItemId)) as AverageRating
from 
	 [{objectQualifier}Publish_vwItems] i 
	join [{objectQualifier}Publish_ArticleVersion] av on (i.ItemVersionID = av.ItemVersionID)

GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Publish_spInsertItemView]    Script Date: 11/30/2006 19:34:48 ******/
IF  EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Publish_spInsertItemView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Publish_spInsertItemView]
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Publish_spInsertItemView]
	(
		@ItemId [int]
		, @ItemVersionID [int]
		, @UserId [int]
		, @TabId [int]
		, @IpAddress [varchar] (25)
		, @UserAgent [varchar] (100)
		, @HttpReferrer [varchar] (500)
		, @SiteUrl [nvarchar] (500)

	)
	AS 
	           
	INSERT INTO {databaseOwner}[{objectQualifier}Publish_ItemView]
	(
		[ItemID]
		, [ItemVersionID]
		, [UserId]
		, [TabId]
		, [UserIpAddress]
		, [UserAgent]
		, [HttpReferrer]
		, [ViewDate]
		, [SiteUrl]
		)
	 
	VALUES 
		( 
		@ItemID
		, @ItemVersionID
		, @UserId
		, @TabId
		, @IpAddress
		, @UserAgent
		, @HttpReferrer
		, GetDate()
		, @SiteUrl
		)
		
	update {databaseOwner}[{objectQualifier}Publish_Item]
	set ViewCount = ViewCount +1
	where ItemId = @ItemId

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}publish_spGetItemsForTagsPaging]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}publish_spGetItemsForTagsPaging]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}publish_spGetItemsForTagsPaging] 
	@PortalId int
	, @TagList nvarchar(4000) = null
	, @index int
	, @pagesize int
	, @sortParameters nvarchar(400)


AS

SET Transaction Isolation Level Read UNCOMMITTED

	declare @xmlDoc int
	EXEC sp_xml_preparedocument @xmlDoc OUTPUT, @TagList

	CREATE TABLE #Tags
	(
		[TagId] nvarchar(255)
	)

	insert into #Tags ([TagId])
	select CONVERT(nvarchar(255), [text])
	from OPENXML(@xmlDoc, '/Tags/Tag/', 2)
	where [text] is not null

	
	declare @TagCount int

	select @TagCount = count(*) from #Tags


	declare @sql varchar(8000)
	Create table #tmpResults 
	(
		Id int not null IDENTITY(1,1),
		ChildItemId int, 
		Thumbnail varchar(500), 
		ChildName nvarchar(255), 
		ChildDescription ntext,
		ChildItemTypeId int,
		StartDate datetime,
		LastUpdated datetime,
		CreatedDate datetime,
		AuthorUserId int,
		DisplayName nvarchar(128),
		ItemRelationshipId int,
		SortOrder int,
		TotalRows int
	)

	set @sql =  'insert into #tmpResults (
		ChildItemId
		, Thumbnail
		,  ChildName
		, ChildDescription
		, ChildItemTypeId
		, StartDate
		, LastUpdated
		, CreatedDate
		, AuthorUserId
		, DisplayName)'

	set @sql = @sql + ' select 
	itemId as ''ChildItemId''
	, Thumbnail
	, [name] as ''ChildName''
	,  description as ''ChildDescription''
	, vi.ItemTypeId as ''ChildItemTypeId''
	, StartDate
	, LastUpdated
	, CreatedDate
	, AuthorUserId
	, u.DisplayName
	
	from {objectQualifier}publish_vwitems vi
	join {objectQualifier}users u on (u.UserId = vi.AuthorUserId)
	where vi.itemversionid in (
		select distinct  ivt.itemversionid
		from {objectQualifier}publish_tags t
		inner join {objectQualifier}publish_itemversiontags ivt on t.TagId = ivt.TagId
		where ivt.ItemVersionId in (
				select vi2.ItemVersionId
				from #Tags X
				inner join {objectQualifier}publish_tags t2 on Convert(int, X.[TagId]) = t2.TagId
				inner join {objectQualifier}publish_itemversiontags ivt2 on ivt2.TagId = t2.TagId
				inner join {objectQualifier}publish_vwItems vi2 on vi2.ItemVersionId = ivt2.ItemVersionId
				where vi2.IsCurrentVersion = 1
				group by vi2.ItemVersionId
				having count(*) = ' + Convert(varchar(20), @TagCount) + '
				)
		and vi.PortalId = ' + Convert(varchar(20), @PortalId) + ' Group By t.TagId, ivt.itemversionid having t.[TagId] in (select [TagId] from #Tags))'

	set @sql = @sql + ' order by  ' + @sortParameters


	exec (@sql)

	DECLARE @rows int

	select @rows = count(*) from #tmpResults

	update #tmpResults set TotalRows = @rows



	if (@PageSize <1)
	 	BEGIN
	 		select * from #tmpResults
	 	END
	ELSE
	 	BEGIN
	 		select * from #tmpResults
	 		where (id >= @index * @PageSize + 1) and id < (@index * @PageSize) + @PageSize + 1
	 	END


	DROP TABLE #Tags


	EXEC sp_xml_removedocument @xmlDoc

GO


